// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
}

model User {
  id               String         @id
  name             String
  email            String         @unique // Ensure emails are normalized (e.g., lowercase) in application logic
  emailVerified    Boolean        @default(false)
  stripeCustomerId String?
  image            String?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  sessions         Session[]
  accounts         Account[]
  notes            Note[]
  chats            Chat[]
  subscriptions    Subscription[]

  @@index([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String   @unique // Unique session token (e.g., JWT or random string)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id
  provider              String    // e.g., "google", "github"
  providerAccountId     String    // Unique ID from the provider
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Note {
  id        String   @id @default(uuid())
  text      String?  // Optional title or summary of the note
  content   String   // Main body of the note
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("notes")
}

model Chat {
  id        String   @id @default(uuid()) // Use uuid() or generate ULID in application
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages  Message[]

  @@map("chats")
}

enum Role {
  USER
  ASSISTANT
  SYSTEM
}

model Message {
  id        String   @id @default(uuid())
  role      Role
  parts     Json     // JSON array of message parts or metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  chatId    String
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)

  @@index([chatId])
  @@map("messages")
}

enum Plan {
  FREE
  PLUS
  PREMIUM
}

model Subscription {
  id                   String    @id @default(uuid()) // Use uuid() or generate ULID in application
  plan                 Plan      @default(FREE)
  userId               String    // Foreign key to User
  stripeCustomerId     String?
  stripeSubscriptionId String?
  status               String
  periodStart          DateTime?
  periodEnd            DateTime?
  cancelAtPeriodEnd    Boolean?  @default(false)
  seats                Int?
  trialStart           DateTime?
  trialEnd             DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscription")
}